// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// PaperCreate defines model for PaperCreate.
type PaperCreate struct {
	Id        string `json:"id"`
	Published string `json:"published"`
	Subject   string `json:"subject"`
	Title     string `json:"title"`
	Url       string `json:"url"`
}

// PaperGet defines model for PaperGet.
type PaperGet struct {
	CreatedAt string `json:"created_at"`
	Id        string `json:"id"`
	Published string `json:"published"`
	Subject   string `json:"subject"`
	Title     string `json:"title"`
	UpdatedAt string `json:"updated_at"`
	Url       string `json:"url"`
}

// PaperList defines model for PaperList.
type PaperList struct {
	Papers *[]PaperItem `json:"papers,omitempty"`
	Total  int          `json:"total"`
}

// ProblemDetail エラー表現として、 [Problem Details for HTTP APIs](https://tools.ietf.org/html/rfc7807) を用いる。
// API クライアントでのエラーハンドリングの実装時は、 `type` を利用する。
// リソース個別のエラー表現は、各API仕様に記載する。
type ProblemDetail struct {
	// Detail 個別の Problem を説明するヒューマンリーダブルな文章。
	// 通常、サーバーのエラー文を返す。
	Detail string `json:"detail"`

	// ErrorCode Title のスネークケース表現。Extension Member.
	ErrorCode string `json:"error_code"`

	// Instance エラー発生箇所を示す URI 表現 (リクエストを処理したエンドポイントのURI)
	Instance string `json:"instance"`

	// Status HTTP ステータスコード
	Status int `json:"status"`

	// Title Problem の `type` に対するヒューマンリーダブルな説明文
	Title string `json:"title"`

	// Type Problem の種別を一意に表現するURI
	Type string `json:"type"`
}

// SearchPaper defines model for SearchPaper.
type SearchPaper struct {
	Papers *[]struct {
		Title *string `json:"title,omitempty"`
		Url   *string `json:"url,omitempty"`
	} `json:"papers,omitempty"`
	Total int `json:"total"`
}

// PaperBase defines model for paperBase.
type PaperBase struct {
	Published string `json:"published"`
	Subject   string `json:"subject"`
	Url       string `json:"url"`
}

// PaperItem defines model for paperItem.
type PaperItem struct {
	Id    string `json:"id"`
	Title string `json:"title"`
}

// Author defines model for author.
type Author = string

// MaxResult defines model for max_result.
type MaxResult = int

// PaperId defines model for paper-id.
type PaperId = string

// Title defines model for title.
type Title = string

// InternalServerError エラー表現として、 [Problem Details for HTTP APIs](https://tools.ietf.org/html/rfc7807) を用いる。
// API クライアントでのエラーハンドリングの実装時は、 `type` を利用する。
// リソース個別のエラー表現は、各API仕様に記載する。
type InternalServerError = ProblemDetail

// NotFound エラー表現として、 [Problem Details for HTTP APIs](https://tools.ietf.org/html/rfc7807) を用いる。
// API クライアントでのエラーハンドリングの実装時は、 `type` を利用する。
// リソース個別のエラー表現は、各API仕様に記載する。
type NotFound = ProblemDetail

// SearchGetParams defines parameters for SearchGet.
type SearchGetParams struct {
	Title     Title      `form:"title" json:"title"`
	Author    *Author    `form:"author,omitempty" json:"author,omitempty"`
	MaxResult *MaxResult `form:"max_result,omitempty" json:"max_result,omitempty"`
}

// PapersPostJSONRequestBody defines body for PapersPost for application/json ContentType.
type PapersPostJSONRequestBody = PaperCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ヘルスチェック
	// (GET /health)
	HealthGet(w http.ResponseWriter, r *http.Request)
	// 論文削除
	// (DELETE /paper/{paper-id})
	PaperDelete(w http.ResponseWriter, r *http.Request, paperId PaperId)
	// 論文詳細取得
	// (GET /paper/{paper-id})
	PaperGet(w http.ResponseWriter, r *http.Request, paperId PaperId)
	// 論文一覧取得
	// (GET /papers)
	PapersGet(w http.ResponseWriter, r *http.Request)
	// 論文登録
	// (POST /papers)
	PapersPost(w http.ResponseWriter, r *http.Request)
	// 論文検索
	// (GET /search)
	SearchGet(w http.ResponseWriter, r *http.Request, params SearchGetParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// ヘルスチェック
// (GET /health)
func (_ Unimplemented) HealthGet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 論文削除
// (DELETE /paper/{paper-id})
func (_ Unimplemented) PaperDelete(w http.ResponseWriter, r *http.Request, paperId PaperId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 論文詳細取得
// (GET /paper/{paper-id})
func (_ Unimplemented) PaperGet(w http.ResponseWriter, r *http.Request, paperId PaperId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 論文一覧取得
// (GET /papers)
func (_ Unimplemented) PapersGet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 論文登録
// (POST /papers)
func (_ Unimplemented) PapersPost(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 論文検索
// (GET /search)
func (_ Unimplemented) SearchGet(w http.ResponseWriter, r *http.Request, params SearchGetParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// HealthGet operation middleware
func (siw *ServerInterfaceWrapper) HealthGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthGet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PaperDelete operation middleware
func (siw *ServerInterfaceWrapper) PaperDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "paper-id" -------------
	var paperId PaperId

	err = runtime.BindStyledParameterWithLocation("simple", false, "paper-id", runtime.ParamLocationPath, chi.URLParam(r, "paper-id"), &paperId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "paper-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PaperDelete(w, r, paperId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PaperGet operation middleware
func (siw *ServerInterfaceWrapper) PaperGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "paper-id" -------------
	var paperId PaperId

	err = runtime.BindStyledParameterWithLocation("simple", false, "paper-id", runtime.ParamLocationPath, chi.URLParam(r, "paper-id"), &paperId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "paper-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PaperGet(w, r, paperId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PapersGet operation middleware
func (siw *ServerInterfaceWrapper) PapersGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PapersGet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PapersPost operation middleware
func (siw *ServerInterfaceWrapper) PapersPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PapersPost(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SearchGet operation middleware
func (siw *ServerInterfaceWrapper) SearchGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchGetParams

	// ------------- Required query parameter "title" -------------

	if paramValue := r.URL.Query().Get("title"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "title"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "title", r.URL.Query(), &params.Title)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "title", Err: err})
		return
	}

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", r.URL.Query(), &params.Author)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "author", Err: err})
		return
	}

	// ------------- Optional query parameter "max_result" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_result", r.URL.Query(), &params.MaxResult)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "max_result", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchGet(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.HealthGet)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/paper/{paper-id}", wrapper.PaperDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/paper/{paper-id}", wrapper.PaperGet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/papers", wrapper.PapersGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/papers", wrapper.PapersPost)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/search", wrapper.SearchGet)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"OBntiwoXB3P/DwAA//91IPzvUR4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
